# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bmi_calculator as module_0
import builtins as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    int_0 = 2
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"
    bool_0 = False
    module_0.BMICalc(bool_0, b_m_i_calc_0, b_m_i_calc_0)


def test_case_1():
    int_0 = 19
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"


@pytest.mark.xfail(strict=True)
def test_case_2():
    int_0 = 1102
    float_0 = -264.0
    module_0.BMICalc(int_0, int_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    int_0 = 309
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Obese"
    var_0.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = 19
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"
    bool_0 = True
    module_0.BMICalc(int_0, bool_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 2828
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Underweight"
    var_0.classify_bmi_teens_and_children()


def test_case_6():
    float_0 = 324.7716032668239
    b_m_i_calc_0 = module_0.BMICalc(float_0, float_0, float_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_teens_and_children()


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 19
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"
    bool_0 = False
    module_0.BMICalc(int_0, bool_0, bool_0)


def test_case_8():
    int_0 = 19
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"
    with pytest.raises(ValueError):
        b_m_i_calc_0.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_9():
    int_0 = 348
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(28.735632183908045, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_adults()
    assert var_1 == "Overweight"
    object_0 = module_1.object()
    var_2 = b_m_i_calc_0.bmi_value()
    assert var_2 == pytest.approx(28.735632183908045, abs=0.01, rel=0.01)
    int_0.classify_bmi_teens_and_children()


def test_case_10():
    float_0 = 34.99999999999999
    b_m_i_calc_0 = module_0.BMICalc(float_0, float_0, float_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Severely Obese"
    int_0 = 2
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Obese"
    with pytest.raises(ValueError):
        b_m_i_calc_1.classify_bmi_adults()


def test_case_11():
    int_0 = 430
    int_1 = 351
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(18.983234180638185, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Overweight"
    var_2 = b_m_i_calc_0.classify_bmi_adults()
    assert var_2 == "Normal weight"


@pytest.mark.xfail(strict=True)
def test_case_12():
    int_0 = 649
    int_1 = 370
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(15.408320493066256, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Overweight"
    var_1.bmi_value()


def test_case_13():
    int_0 = 446
    int_1 = 314
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(15.78555772285789, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_0.classify_bmi_adults()
    assert var_1 == "Underweight"
    var_2 = b_m_i_calc_0.classify_bmi_adults()
    assert var_2 == "Underweight"
    var_3 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_3 == "Obese"
    var_4 = b_m_i_calc_0.classify_bmi_adults()
    assert var_4 == "Underweight"
    with pytest.raises(ValueError):
        b_m_i_calc_1.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_14():
    int_0 = 19
    int_1 = 708
    b_m_i_calc_0 = module_0.BMICalc(int_1, int_1, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Underweight"
    var_0.classify_bmi_adults()


def test_case_15():
    int_0 = 430
    int_1 = 351
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(18.983234180638185, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Overweight"


def test_case_16():
    int_0 = 994
    int_1 = 781
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Underweight"
    var_1 = b_m_i_calc_0.bmi_value()
    assert var_1 == pytest.approx(7.904570278815752, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_1)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_2 == "Underweight"
    with pytest.raises(ValueError):
        b_m_i_calc_1.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_17():
    int_0 = 638
    int_1 = 340
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_1, int_1)
    var_0 = b_m_i_calc_1.bmi_value()
    assert var_0 == pytest.approx(8.352905337015162, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_1 == "Obese"
    var_2 = b_m_i_calc_1.classify_bmi_adults()
    assert var_2 == "Underweight"
    module_0.BMICalc(var_2, var_0, var_2)


@pytest.mark.xfail(strict=True)
def test_case_18():
    int_0 = 430
    int_1 = 351
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(18.983234180638185, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Normal weight"
    var_1.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 994
    int_1 = 676
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(6.841855964762418, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Overweight"
    var_0.bmi_value()


@pytest.mark.xfail(strict=True)
def test_case_20():
    int_0 = 7
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"
    module_0.BMICalc(var_0, b_m_i_calc_0, var_0)


@pytest.mark.xfail(strict=True)
def test_case_21():
    int_0 = 1784
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    object_0 = module_1.object()
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, int_0)
    var_0 = b_m_i_calc_1.bmi_value()
    assert var_0 == pytest.approx(5.605381165919282, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_0, int_0, var_0)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_1 == "Underweight"
    object_0.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_22():
    int_0 = 478
    int_1 = 283
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(12.385987640272404, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Obese"
    var_2 = b_m_i_calc_0.classify_bmi_adults()
    assert var_2 == "Underweight"
    int_0.classify_bmi_adults()


def test_case_23():
    int_0 = 2
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_teens_and_children()
    assert var_0 == "Obese"


def test_case_24():
    int_0 = 638
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, int_0)
    var_0 = b_m_i_calc_1.bmi_value()
    assert var_0 == pytest.approx(15.673981191222571, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_0, int_0, var_0)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_1 == "Underweight"
    var_2 = b_m_i_calc_1.classify_bmi_adults()
    assert var_2 == "Underweight"
    var_3 = b_m_i_calc_1.bmi_value()
    assert var_3 == pytest.approx(15.673981191222571, abs=0.01, rel=0.01)
    var_4 = b_m_i_calc_1.bmi_value()
    assert var_4 == pytest.approx(15.673981191222571, abs=0.01, rel=0.01)
    with pytest.raises(ValueError):
        b_m_i_calc_1.classify_bmi_teens_and_children()


@pytest.mark.xfail(strict=True)
def test_case_25():
    int_0 = 949
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Underweight"
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, int_0)
    var_1 = b_m_i_calc_1.bmi_value()
    assert var_1 == pytest.approx(10.53740779768177, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_0, int_0, var_1)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_1.classify_bmi_adults()
    assert var_2 == "Underweight"
    var_3 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_3 == "Underweight"
    var_2.classify_bmi_adults()


@pytest.mark.xfail(strict=True)
def test_case_26():
    int_0 = 661
    int_1 = 439
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(15.1285930408472, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Normal weight"
    var_2 = b_m_i_calc_0.classify_bmi_adults()
    assert var_2 == "Underweight"
    var_1.classify_bmi_teens_and_children()


def test_case_27():
    int_0 = 2
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(5000.0, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(var_0, int_0, int_0)
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Underweight"


@pytest.mark.xfail(strict=True)
def test_case_28():
    int_0 = 430
    int_1 = 190
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Underweight"
    var_1 = b_m_i_calc_0.bmi_value()
    assert var_1 == pytest.approx(10.275824770146025, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, var_1)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_2 == "Overweight"
    var_1.bmi_value()


@pytest.mark.xfail(strict=True)
def test_case_29():
    int_0 = 1001
    int_1 = 529
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(9.990009990009991, abs=0.01, rel=0.01)
    var_1 = b_m_i_calc_0.classify_bmi_adults()
    assert var_1 == "Underweight"
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_2 == "Normal weight"
    var_2.bmi_value()


@pytest.mark.xfail(strict=True)
def test_case_30():
    int_0 = 1001
    int_1 = 468
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(9.990009990009991, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_1 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_1 == "Overweight"
    var_2 = b_m_i_calc_0.classify_bmi_adults()
    assert var_2 == "Underweight"
    module_1.object(*var_2)


@pytest.mark.xfail(strict=True)
def test_case_31():
    int_0 = 991
    int_1 = 458
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(10.090817356205852, abs=0.01, rel=0.01)
    var_1 = b_m_i_calc_0.classify_bmi_adults()
    assert var_1 == "Underweight"
    b_m_i_calc_1 = module_0.BMICalc(int_1, int_1, var_0)
    assert (
        f"{type(b_m_i_calc_1).__module__}.{type(b_m_i_calc_1).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_1.classify_bmi_teens_and_children()
    assert var_2 == "Normal weight"
    var_3 = b_m_i_calc_0.classify_bmi_adults()
    assert var_3 == "Underweight"
    module_1.object(*var_3)


@pytest.mark.xfail(strict=True)
def test_case_32():
    int_0 = 1664
    int_1 = 651
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_1, int_1)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    var_0 = module_0.BMICalc(int_1, int_0, int_0)
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, int_1)
    var_1 = b_m_i_calc_0.bmi_value()
    assert var_1 == pytest.approx(2.351117557322485, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_1, int_1, var_1)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_2 == "Normal weight"
    var_3 = b_m_i_calc_0.classify_bmi_adults()
    assert var_3 == "Underweight"
    var_4 = b_m_i_calc_1.bmi_value()
    assert var_4 == pytest.approx(6.009615384615384, abs=0.01, rel=0.01)
    var_4.bmi_value()


@pytest.mark.xfail(strict=True)
def test_case_33():
    int_0 = 1028
    b_m_i_calc_0 = module_0.BMICalc(int_0, int_0, int_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    int_1 = 728
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_1, int_1)
    var_0 = b_m_i_calc_0.bmi_value()
    assert var_0 == pytest.approx(9.72762645914397, abs=0.01, rel=0.01)
    var_1 = b_m_i_calc_1.bmi_value()
    assert var_1 == pytest.approx(6.8888249632848355, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_1, int_1, var_1)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_2 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_2 == "Normal weight"
    var_0.bmi_value()


@pytest.mark.xfail(strict=True)
def test_case_34():
    float_0 = 191.0
    b_m_i_calc_0 = module_0.BMICalc(float_0, float_0, float_0)
    assert (
        f"{type(b_m_i_calc_0).__module__}.{type(b_m_i_calc_0).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    assert (
        f"{type(module_0.BMICalc.height).__module__}.{type(module_0.BMICalc.height).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.age).__module__}.{type(module_0.BMICalc.age).__qualname__}"
        == "builtins.property"
    )
    assert (
        f"{type(module_0.BMICalc.weight).__module__}.{type(module_0.BMICalc.weight).__qualname__}"
        == "builtins.property"
    )
    int_0 = 2978
    var_0 = b_m_i_calc_0.classify_bmi_adults()
    assert var_0 == "Severely Obese"
    int_1 = 571
    var_1 = b_m_i_calc_0.bmi_value()
    assert var_1 == pytest.approx(52.35602094240838, abs=0.01, rel=0.01)
    b_m_i_calc_1 = module_0.BMICalc(int_0, int_0, int_1)
    var_2 = b_m_i_calc_1.bmi_value()
    assert var_2 == pytest.approx(3.3579583613163195, abs=0.01, rel=0.01)
    b_m_i_calc_2 = module_0.BMICalc(int_1, int_1, var_2)
    assert (
        f"{type(b_m_i_calc_2).__module__}.{type(b_m_i_calc_2).__qualname__}"
        == "bmi_calculator.BMICalc"
    )
    var_3 = b_m_i_calc_1.classify_bmi_adults()
    assert var_3 == "Underweight"
    var_4 = b_m_i_calc_2.classify_bmi_teens_and_children()
    assert var_4 == "Overweight"
    var_3.classify_bmi_teens_and_children()
